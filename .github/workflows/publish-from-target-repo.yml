name: Publish Packages from Target Repo

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      package:
        description: "Package to publish"
        required: true
        type: choice
        options:
          - sdk-node
          - sdk-python
          - middleware-express
          - middleware-fastapi
          - all
      version:
        description: "Version to publish (e.g., 0.1.0)"
        required: false
        type: string

jobs:
  publish-sdk-node:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'sdk-node' || github.event.inputs.package == 'all'))
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@aporthq"

      - name: Global build verification
        run: |
          echo "üîç Verifying all packages can build..."

          # Check Node.js packages
          echo "Checking Node.js SDK..."
          cd sdk/node
          if [ ! -f "package.json" ]; then
            echo "‚ùå Node.js SDK package.json not found"
            exit 1
          fi
          cd ../..

          echo "Checking Express middleware..."
          cd middleware/express
          if [ ! -f "package.json" ]; then
            echo "‚ùå Express middleware package.json not found"
            exit 1
          fi
          cd ../..

          # Check Python packages
          echo "Checking Python SDK..."
          cd sdk/python
          if [ ! -f "pyproject.toml" ]; then
            echo "‚ùå Python SDK pyproject.toml not found"
            exit 1
          fi
          cd ../..

          echo "Checking FastAPI middleware..."
          cd middleware/fastapi
          if [ ! -f "pyproject.toml" ]; then
            echo "‚ùå FastAPI middleware pyproject.toml not found"
            exit 1
          fi
          cd ../..

          echo "‚úÖ All package configurations verified"

      - name: Check if package already exists
        run: |
          cd sdk/node
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Checking if version $VERSION already exists on npm..."
          if npm view @aporthq/sdk-node@$VERSION version >/dev/null 2>&1; then
            echo "Version $VERSION already exists on npm - skipping publish"
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          else
            echo "Version $VERSION is available for publishing"
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: Clean build artifacts
        run: |
          cd sdk/node
          rm -rf dist/
          echo "‚úÖ Cleaned Node.js SDK build artifacts"

      - name: Install dependencies
        run: |
          cd sdk/node
          npm ci

      - name: Build
        run: |
          cd sdk/node
          npm run build
          echo "‚úÖ Built Node.js SDK successfully"

      - name: Verify build artifacts
        run: |
          cd sdk/node
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist/ directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Build failed: dist/index.js not found"
            exit 1
          fi
          if [ ! -f "dist/index.d.ts" ]; then
            echo "‚ùå Build failed: dist/index.d.ts not found"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified: dist/index.js and dist/index.d.ts exist"

      - name: Run tests
        run: |
          cd sdk/node
          npm test

      - name: Publish to npm
        if: env.SKIP_PUBLISH != 'true'
        run: |
          cd sdk/node
          npm publish

      - name: Verify publication
        if: env.SKIP_PUBLISH != 'true'
        run: |
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Verifying @aporthq/sdk-node@$VERSION is available on npm..."
          npm view @aporthq/sdk-node@$VERSION version

      - name: Build summary
        run: |
          echo "üì¶ Build Summary:"
          echo "=================="

          # Node.js packages
          if [ -d "sdk/node/dist" ]; then
            echo "‚úÖ Node.js SDK: Built successfully"
            ls -la sdk/node/dist/ | head -5
          else
            echo "‚ùå Node.js SDK: Build failed"
          fi

          if [ -d "middleware/express/dist" ]; then
            echo "‚úÖ Express Middleware: Built successfully"
            ls -la middleware/express/dist/ | head -5
          else
            echo "‚ùå Express Middleware: Build failed"
          fi

          # Python packages
          if [ -d "sdk/python/dist" ]; then
            echo "‚úÖ Python SDK: Built successfully"
            ls -la sdk/python/dist/
          else
            echo "‚ùå Python SDK: Build failed"
          fi

          if [ -d "middleware/fastapi/dist" ]; then
            echo "‚úÖ FastAPI Middleware: Built successfully"
            ls -la middleware/fastapi/dist/
          else
            echo "‚ùå FastAPI Middleware: Build failed"
          fi

          echo "=================="
          echo "üéâ All packages ready for publishing!"

  publish-sdk-python:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'sdk-python' || github.event.inputs.package == 'all'))
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Validate package structure
        run: |
          cd sdk/python
          # Check if pyproject.toml exists and is valid
          if [ ! -f "pyproject.toml" ]; then
            echo "Error: pyproject.toml not found"
            exit 1
          fi
          # Validate package name
          python -c "import tomli; data = tomli.load(open('pyproject.toml', 'rb')); print(f'Package: {data[\"project\"][\"name\"]}')"

      - name: Clean build artifacts
        run: |
          cd sdk/python
          rm -rf dist/ build/ src/*.egg-info/
          echo "‚úÖ Cleaned Python SDK build artifacts"

      - name: Install dependencies
        run: |
          cd sdk/python
          pip install build twine pytest requests tomli

      - name: Check if package already exists
        run: |
          cd sdk/python
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Checking if version $VERSION already exists on PyPI..."
          python -c "
          import requests
          package_name = 'aporthq-sdk-python'
          try:
              response = requests.get(f'https://pypi.org/pypi/{package_name}/json')
              if response.status_code == 200:
                  data = response.json()
                  if '$VERSION' in data['releases']:
                      print(f'Version $VERSION already exists on PyPI - skipping publish')
                      exit(1)  # Skip publish
                  else:
                      print(f'Version $VERSION is available for publishing')
                      exit(0)  # Continue with publish
              else:
                  print(f'Package {package_name} not found on PyPI, ready for first release')
                  exit(0)  # Continue with publish
          except Exception as e:
              print(f'Error checking PyPI: {e}')
              exit(0)  # Continue with publish
          "
          if [ $? -eq 0 ]; then
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          else
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          fi

      - name: Build package
        run: |
          cd sdk/python
          python -m build
          echo "‚úÖ Built Python SDK successfully"

      - name: Verify build artifacts
        run: |
          cd sdk/python
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist/ directory not found"
            exit 1
          fi
          # Check for wheel file
          if [ ! -f dist/*.whl ]; then
            echo "‚ùå Build failed: wheel file not found in dist/"
            exit 1
          fi
          # Check for source distribution
          if [ ! -f dist/*.tar.gz ]; then
            echo "‚ùå Build failed: source distribution not found in dist/"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified: wheel and source distribution exist"

      - name: Run tests
        run: |
          cd sdk/python
          pip install -e .
          # Run tests if they exist, otherwise skip
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            python -m pytest tests/ -v
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Publish to PyPI
        if: env.SKIP_PUBLISH != 'true'
        run: |
          cd sdk/python
          python -m twine upload dist/*

      - name: Verify publication
        if: env.SKIP_PUBLISH != 'true'
        run: |
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Verifying aporthq-sdk-python@$VERSION is available on PyPI..."
          python -c "
          import requests
          response = requests.get('https://pypi.org/pypi/aporthq-sdk-python/json')
          if response.status_code == 200:
              data = response.json()
              if '$VERSION' in data['releases']:
                  print(f'‚úÖ Version $VERSION successfully published to PyPI')
              else:
                  print(f'‚ùå Version $VERSION not found on PyPI')
                  exit(1)
          else:
              print(f'‚ùå Error verifying publication: {response.status_code}')
              exit(1)
          "

  publish-middleware-express:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'middleware-express' || github.event.inputs.package == 'all'))
    needs: publish-sdk-node
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@aporthq"

      - name: Check if Express middleware directory exists
        run: |
          if [ ! -d "middleware/express" ]; then
            echo "‚ùå middleware/express directory not found"
            echo "Available directories:"
            ls -la
            echo "Contents of current directory:"
            find . -type d -name "*" | head -20
            exit 1
          else
            echo "‚úÖ middleware/express directory found"
            ls -la middleware/express/
          fi

      - name: Check if package already exists
        run: |
          cd middleware/express
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Checking if version $VERSION already exists on npm..."
          if npm view @aporthq/middleware-express@$VERSION version >/dev/null 2>&1; then
            echo "Version $VERSION already exists on npm - skipping publish"
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          else
            echo "Version $VERSION is available for publishing"
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: Clean build artifacts
        run: |
          cd middleware/express
          rm -rf dist/
          echo "‚úÖ Cleaned Express middleware build artifacts"

      - name: Install dependencies
        run: |
          cd middleware/express
          npm ci

      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          find . -name "package.json" | head -10
          echo "Contents of middleware/express:"
          ls -la middleware/express/
          echo "Contents of sdk:"
          ls -la sdk/

      - name: Install local SDK
        run: |
          cd middleware/express
          # Try different paths to find the SDK
          if [ -f "../sdk/node/package.json" ]; then
            echo "Installing from ../sdk/node"
            npm install ../sdk/node
          elif [ -f "../../sdk/node/package.json" ]; then
            echo "Installing from ../../sdk/node"
            npm install ../../sdk/node
          else
            echo "SDK not found, listing available directories:"
            find . -name "package.json" -path "*/sdk/*"
            exit 1
          fi

      - name: Build
        run: |
          cd middleware/express
          npm run build
          echo "‚úÖ Built Express middleware successfully"

      - name: Verify build artifacts
        run: |
          cd middleware/express
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist/ directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Build failed: dist/index.js not found"
            exit 1
          fi
          if [ ! -f "dist/index.d.ts" ]; then
            echo "‚ùå Build failed: dist/index.d.ts not found"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified: dist/index.js and dist/index.d.ts exist"

      - name: Publish to npm
        if: env.SKIP_PUBLISH != 'true'
        run: |
          cd middleware/express
          npm publish

      - name: Verify publication
        if: env.SKIP_PUBLISH != 'true'
        run: |
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Verifying @aporthq/middleware-express@$VERSION is available on npm..."
          npm view @aporthq/middleware-express@$VERSION version

  publish-middleware-fastapi:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'middleware-fastapi' || github.event.inputs.package == 'all'))
    needs: publish-sdk-python
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Check if FastAPI middleware directory exists
        run: |
          if [ ! -d "middleware/fastapi" ]; then
            echo "‚ùå middleware/fastapi directory not found"
            echo "Available directories:"
            ls -la
            echo "Contents of current directory:"
            find . -type d -name "*" | head -20
            exit 1
          else
            echo "‚úÖ middleware/fastapi directory found"
            ls -la middleware/fastapi/
          fi

      - name: Check if package already exists
        run: |
          cd middleware/fastapi
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Checking if version $VERSION already exists on PyPI..."
          python -c "
          import requests
          package_name = 'aporthq-middleware-fastapi'
          try:
              response = requests.get(f'https://pypi.org/pypi/{package_name}/json')
              if response.status_code == 200:
                  data = response.json()
                  if '$VERSION' in data['releases']:
                      print(f'Version $VERSION already exists on PyPI - skipping publish')
                      exit(1)  # Skip publish
                  else:
                      print(f'Version $VERSION is available for publishing')
                      exit(0)  # Continue with publish
              else:
                  print(f'Package {package_name} not found on PyPI, ready for first release')
                  exit(0)  # Continue with publish
          except Exception as e:
              print(f'Error checking PyPI: {e}')
              exit(0)  # Continue with publish
          "
          if [ $? -eq 0 ]; then
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          else
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          fi

      - name: Clean build artifacts
        run: |
          cd middleware/fastapi
          rm -rf dist/ build/ src/*.egg-info/
          echo "‚úÖ Cleaned FastAPI middleware build artifacts"

      - name: Install dependencies
        run: |
          cd middleware/fastapi
          pip install build twine pytest requests tomli

      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          find . -name "setup.py" | head -10
          echo "Contents of middleware/fastapi:"
          ls -la middleware/fastapi/
          echo "Contents of sdk:"
          ls -la sdk/

      - name: Install local SDK
        run: |
          cd middleware/fastapi
          # Try different paths to find the SDK
          if [ -f "../sdk/python/setup.py" ]; then
            echo "Installing from ../sdk/python"
            pip install -e ../sdk/python
          elif [ -f "../../sdk/python/setup.py" ]; then
            echo "Installing from ../../sdk/python"
            pip install -e ../../sdk/python
          else
            echo "SDK not found, listing available directories:"
            find . -name "setup.py" -path "*/sdk/*"
            exit 1
          fi

      - name: Build package
        run: |
          cd middleware/fastapi
          python -m build
          echo "‚úÖ Built FastAPI middleware successfully"

      - name: Verify build artifacts
        run: |
          cd middleware/fastapi
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist/ directory not found"
            exit 1
          fi
          # Check for wheel file
          if [ ! -f dist/*.whl ]; then
            echo "‚ùå Build failed: wheel file not found in dist/"
            exit 1
          fi
          # Check for source distribution
          if [ ! -f dist/*.tar.gz ]; then
            echo "‚ùå Build failed: source distribution not found in dist/"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified: wheel and source distribution exist"

      - name: Publish to PyPI
        if: env.SKIP_PUBLISH != 'true'
        run: |
          cd middleware/fastapi
          python -m twine upload dist/*

      - name: Verify publication
        if: env.SKIP_PUBLISH != 'true'
        run: |
          # Extract version from tag or use input version
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "Verifying aporthq-middleware-fastapi@$VERSION is available on PyPI..."
          python -c "
          import requests
          response = requests.get('https://pypi.org/pypi/aporthq-middleware-fastapi/json')
          if response.status_code == 200:
              data = response.json()
              if '$VERSION' in data['releases']:
                  print(f'‚úÖ Version $VERSION successfully published to PyPI')
              else:
                  print(f'‚ùå Version $VERSION not found on PyPI')
                  exit(1)
          else:
              print(f'‚ùå Error verifying publication: {response.status_code}')
              exit(1)
          "

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      [
        publish-sdk-node,
        publish-sdk-python,
        publish-middleware-express,
        publish-middleware-fastapi,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's New in ${{ github.ref_name }}

            This release includes updates to all APort SDKs and middleware packages.

            ### Packages Published
            - **@aporthq/sdk-node** - Node.js SDK
            - **aporthq-sdk-python** - Python SDK
            - **@aporthq/middleware-express** - Express.js middleware
            - **aporthq-middleware-fastapi** - FastAPI middleware

            ### Installation
            ```bash
            # Node.js
            npm install @aporthq/sdk-node@${{ github.ref_name }}
            npm install @aporthq/middleware-express@${{ github.ref_name }}

            # Python
            pip install aporthq-sdk-python==${{ github.ref_name }}
            pip install aporthq-middleware-fastapi==${{ github.ref_name }}
            ```

            ### Documentation
            - [Node.js SDK](sdk/node/README.md)
            - [Python SDK](sdk/python/README.md)
            - [Express Middleware](middleware/express/README.md)
            - [FastAPI Middleware](middleware/fastapi/README.md)

            ---
            *This release was automatically generated by the APort CI/CD pipeline.*
          draft: false
          prerelease: false
